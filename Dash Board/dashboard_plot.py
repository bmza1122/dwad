#!/usr/bin/env python3
"""
dashboard_plot.py - ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
"""

import csv
import datetime
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import pandas as pd
import numpy as np
import os
import sys
from typing import List, Dict, Optional

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢
plt.rcParams['font.family'] = ['DejaVu Sans', 'Tahoma', 'Arial']
plt.rcParams['font.size'] = 10

class NetworkDashboard:
    def __init__(self, log_file: str = "network_log.csv"):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Dashboard
        
        Args:
            log_file: ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå CSV ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        """
        self.log_file = log_file
        self.data = None
        self.load_data()
    
    def load_data(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV"""
        if not os.path.exists(self.log_file):
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {self.log_file}")
            return
        
        try:
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            self.data = pd.read_csv(self.log_file)
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô datetime
            self.data['timestamp'] = pd.to_datetime(self.data['timestamp'])
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            self.data = self.data[self.data['status'] == 'success'].copy()
            
            print(f"üìä ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß: {len(self.data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            if len(self.data) == 0:
                print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
                return
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            print(f"üìÖ ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤: {self.data['timestamp'].min()} ‡∏ñ‡∏∂‡∏á {self.data['timestamp'].max()}")
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}")
            self.data = None
    
    def create_summary_plot(self, days: int = 7):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
        
        Args:
            days: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
        """
        if self.data is None or len(self.data) == 0:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á")
            return
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô
        cutoff_date = datetime.datetime.now() - datetime.timedelta(days=days)
        filtered_data = self.data[self.data['timestamp'] >= cutoff_date].copy()
        
        if len(filtered_data) == 0:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô {days} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤")
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        fig, axes = plt.subplots(3, 1, figsize=(12, 10))
        fig.suptitle(f'Network Quality Dashboard - Last {days} Days', fontsize=16, fontweight='bold')
        
        # ‡∏Å‡∏£‡∏≤‡∏ü Ping
        axes[0].plot(filtered_data['timestamp'], filtered_data['ping_ms'], 
                    color='red', marker='o', markersize=3, linewidth=1.5)
        axes[0].set_title('üèì Ping (ms)', fontsize=12, fontweight='bold')
        axes[0].set_ylabel('Ping (ms)')
        axes[0].grid(True, alpha=0.3)
        axes[0].set_ylim(0, max(filtered_data['ping_ms']) * 1.1)
        
        # ‡∏Å‡∏£‡∏≤‡∏ü Download Speed
        axes[1].plot(filtered_data['timestamp'], filtered_data['download_mbps'], 
                    color='green', marker='o', markersize=3, linewidth=1.5)
        axes[1].set_title('‚¨áÔ∏è Download Speed (Mbps)', fontsize=12, fontweight='bold')
        axes[1].set_ylabel('Download (Mbps)')
        axes[1].grid(True, alpha=0.3)
        axes[1].set_ylim(0, max(filtered_data['download_mbps']) * 1.1)
        
        # ‡∏Å‡∏£‡∏≤‡∏ü Upload Speed
        axes[2].plot(filtered_data['timestamp'], filtered_data['upload_mbps'], 
                    color='blue', marker='o', markersize=3, linewidth=1.5)
        axes[2].set_title('‚¨ÜÔ∏è Upload Speed (Mbps)', fontsize=12, fontweight='bold')
        axes[2].set_ylabel('Upload (Mbps)')
        axes[2].set_xlabel('Time')
        axes[2].grid(True, alpha=0.3)
        axes[2].set_ylim(0, max(filtered_data['upload_mbps']) * 1.1)
        
        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        for ax in axes:
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%m/%d %H:%M'))
            ax.xaxis.set_major_locator(mdates.HourLocator(interval=6))
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
        
        plt.tight_layout()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        filename = f'network_dashboard_{days}days.png'
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡πâ‡∏ß: {filename}")
        plt.show()
    
    def create_statistics_plot(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        if self.data is None or len(self.data) == 0:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á")
            return
        
        fig, axes = plt.subplots(2, 3, figsize=(15, 10))
        fig.suptitle('Network Statistics & Distribution', fontsize=16, fontweight='bold')
        
        # Histogram - Ping
        axes[0,0].hist(self.data['ping_ms'], bins=20, color='red', alpha=0.7, edgecolor='black')
        axes[0,0].set_title('üèì Ping Distribution')
        axes[0,0].set_xlabel('Ping (ms)')
        axes[0,0].set_ylabel('Frequency')
        axes[0,0].grid(True, alpha=0.3)
        
        # Histogram - Download
        axes[0,1].hist(self.data['download_mbps'], bins=20, color='green', alpha=0.7, edgecolor='black')
        axes[0,1].set_title('‚¨áÔ∏è Download Speed Distribution')
        axes[0,1].set_xlabel('Download (Mbps)')
        axes[0,1].set_ylabel('Frequency')
        axes[0,1].grid(True, alpha=0.3)
        
        # Histogram - Upload
        axes[0,2].hist(self.data['upload_mbps'], bins=20, color='blue', alpha=0.7, edgecolor='black')
        axes[0,2].set_title('‚¨ÜÔ∏è Upload Speed Distribution')
        axes[0,2].set_xlabel('Upload (Mbps)')
        axes[0,2].set_ylabel('Frequency')
        axes[0,2].grid(True, alpha=0.3)
        
        # Box Plot - Ping
        axes[1,0].boxplot(self.data['ping_ms'], patch_artist=True, 
                         boxprops=dict(facecolor='red', alpha=0.7))
        axes[1,0].set_title('üèì Ping Box Plot')
        axes[1,0].set_ylabel('Ping (ms)')
        axes[1,0].grid(True, alpha=0.3)
        
        # Box Plot - Download
        axes[1,1].boxplot(self.data['download_mbps'], patch_artist=True, 
                         boxprops=dict(facecolor='green', alpha=0.7))
        axes[1,1].set_title('‚¨áÔ∏è Download Box Plot')
        axes[1,1].set_ylabel('Download (Mbps)')
        axes[1,1].grid(True, alpha=0.3)
        
        # Box Plot - Upload
        axes[1,2].boxplot(self.data['upload_mbps'], patch_artist=True, 
                         boxprops=dict(facecolor='blue', alpha=0.7))
        axes[1,2].set_title('‚¨ÜÔ∏è Upload Box Plot')
        axes[1,2].set_ylabel('Upload (Mbps)')
        axes[1,2].grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        filename = 'network_statistics.png'
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß: {filename}")
        plt.show()
    
    def create_hourly_analysis(self):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á"""
        if self.data is None or len(self.data) == 0:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á")
            return
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        self.data['hour'] = self.data['timestamp'].dt.hour
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        hourly_stats = self.data.groupby('hour').agg({
            'ping_ms': ['mean', 'std'],
            'download_mbps': ['mean', 'std'],
            'upload_mbps': ['mean', 'std']
        }).round(2)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
        fig, axes = plt.subplots(3, 1, figsize=(12, 10))
        fig.suptitle('Hourly Network Performance Analysis', fontsize=16, fontweight='bold')
        
        hours = range(24)
        
        # ‡∏Å‡∏£‡∏≤‡∏ü Ping ‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        ping_means = [hourly_stats.loc[h, ('ping_ms', 'mean')] if h in hourly_stats.index else np.nan for h in hours]
        ping_stds = [hourly_stats.loc[h, ('ping_ms', 'std')] if h in hourly_stats.index else 0 for h in hours]
        
        axes[0].bar(hours, ping_means, yerr=ping_stds, color='red', alpha=0.7, capsize=5)
        axes[0].set_title('üèì Average Ping by Hour')
        axes[0].set_xlabel('Hour of Day')
        axes[0].set_ylabel('Ping (ms)')
        axes[0].grid(True, alpha=0.3)
        axes[0].set_xticks(range(0, 24, 2))
        
        # ‡∏Å‡∏£‡∏≤‡∏ü Download ‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        download_means = [hourly_stats.loc[h, ('download_mbps', 'mean')] if h in hourly_stats.index else np.nan for h in hours]
        download_stds = [hourly_stats.loc[h, ('download_mbps', 'std')] if h in hourly_stats.index else 0 for h in hours]
        
        axes[1].bar(hours, download_means, yerr=download_stds, color='green', alpha=0.7, capsize=5)
        axes[1].set_title('‚¨áÔ∏è Average Download Speed by Hour')
        axes[1].set_xlabel('Hour of Day')
        axes[1].set_ylabel('Download (Mbps)')
        axes[1].grid(True, alpha=0.3)
        axes[1].set_xticks(range(0, 24, 2))
        
        # ‡∏Å‡∏£‡∏≤‡∏ü Upload ‡∏ï‡∏≤‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        upload_means = [hourly_stats.loc[h, ('upload_mbps', 'mean')] if h in hourly_stats.index else np.nan for h in hours]
        upload_stds = [hourly_stats.loc[h, ('upload_mbps', 'std')] if h in hourly_stats.index else 0 for h in hours]
        
        axes[2].bar(hours, upload_means, yerr=upload_stds, color='blue', alpha=0.7, capsize=5)
        axes[2].set_title('‚¨ÜÔ∏è Average Upload Speed by Hour')
        axes[2].set_xlabel('Hour of Day')
        axes[2].set_ylabel('Upload (Mbps)')
        axes[2].grid(True, alpha=0.3)
        axes[2].set_xticks(range(0, 24, 2))
        
        plt.tight_layout()
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        filename = 'network_hourly_analysis.png'
        plt.savefig(filename, dpi=300, bbox_inches='tight')
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡πâ‡∏ß: {filename}")
        plt.show()
    
    def print_summary_stats(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ"""
        if self.data is None or len(self.data) == 0:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á")
            return
        
        print("\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
        print("=" * 50)
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        stats = {
            'Ping (ms)': self.data['ping_ms'].describe(),
            'Download (Mbps)': self.data['download_mbps'].describe(),
            'Upload (Mbps)': self.data['upload_mbps'].describe()
        }
        
        for metric, stat in stats.items():
            print(f"\n{metric}:")
            print(f"  üìè ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {stat['mean']:.2f}")
            print(f"  üìä ‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á: {stat['50%']:.2f}")
            print(f"  üìà ‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {stat['max']:.2f}")
            print(f"  üìâ ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {stat['min']:.2f}")
            print(f"  üìã ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô: {stat['std']:.2f}")
        
        # ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        time_range = self.data['timestamp'].max() - self.data['timestamp'].min()
        print(f"\n‚è∞ ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {time_range}")
        print(f"üìÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {len(self.data)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        
        # ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        avg_ping = self.data['ping_ms'].mean()
        avg_download = self.data['download_mbps'].mean()
        avg_upload = self.data['upload_mbps'].mean()
        
        print(f"\nüéØ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û:")
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Ping
        if avg_ping < 50:
            ping_quality = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
        elif avg_ping < 100:
            ping_quality = "‡∏î‡∏µ"
        elif avg_ping < 150:
            ping_quality = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        else:
            ping_quality = "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
        
        print(f"  üèì Ping: {ping_quality} ({avg_ping:.1f} ms)")
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Download
        if avg_download > 100:
            download_quality = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
        elif avg_download > 50:
            download_quality = "‡∏î‡∏µ"
        elif avg_download > 25:
            download_quality = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        else:
            download_quality = "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
        
        print(f"  ‚¨áÔ∏è Download: {download_quality} ({avg_download:.1f} Mbps)")
        
        # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Upload
        if avg_upload > 50:
            upload_quality = "‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°"
        elif avg_upload > 25:
            upload_quality = "‡∏î‡∏µ"
        elif avg_upload > 10:
            upload_quality = "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
        else:
            upload_quality = "‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"
        
        print(f"  ‚¨ÜÔ∏è Upload: {upload_quality} ({avg_upload:.1f} Mbps)")
        
        # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        print(f"\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
        if avg_ping > 100:
            print("  ‚Ä¢ Ping ‡∏™‡∏π‡∏á - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        if avg_download < 25:
            print("  ‚Ä¢ Download ‡∏ä‡πâ‡∏≤ - ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à")
        if avg_upload < 10:
            print("  ‚Ä¢ Upload ‡∏ä‡πâ‡∏≤ - ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå")
        
        if avg_ping < 50 and avg_download > 50 and avg_upload > 25:
            print("  ‚Ä¢ ‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏°‡∏µ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°"""
    print("üåê Network Dashboard")
    print("=" * 30)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard
    dashboard = NetworkDashboard()
    
    if dashboard.data is None:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ")
        return
    
    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏°‡∏ô‡∏π
    while True:
        print("\nüìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:")
        print("1. ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ 7 ‡∏ß‡∏±‡∏ô")
        print("2. ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏£‡∏∏‡∏õ 30 ‡∏ß‡∏±‡∏ô")
        print("3. ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥")
        print("4. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")
        print("5. ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
        print("6. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        
        choice = input("\nüéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (1-6): ").strip()
        
        if choice == '1':
            dashboard.create_summary_plot(7)
        elif choice == '2':
            dashboard.create_summary_plot(30)
        elif choice == '3':
            dashboard.create_statistics_plot()
        elif choice == '4':
            dashboard.create_hourly_analysis()
        elif choice == '5':
            dashboard.print_summary_stats()
        elif choice == '6':
            print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            break
        else:
            print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç 1-6")

if __name__ == "__main__":
    main()
