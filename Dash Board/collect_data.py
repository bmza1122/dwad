#!/usr/bin/env python3
"""
collect_data.py - ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï
‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
"""

import csv
import datetime
import os
import sys
import time
import subprocess
import json
from typing import Dict, Optional

class NetworkQualityCollector:
    def __init__(self, log_file: str = "network_log.csv"):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        
        Args:
            log_file: ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå CSV ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        """
        self.log_file = log_file
        self.setup_csv()
    
    def setup_csv(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå CSV ‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà header ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ"""
        if not os.path.exists(self.log_file):
            with open(self.log_file, 'w', newline='', encoding='utf-8') as file:
                writer = csv.writer(file)
                writer.writerow([
                    'timestamp',
                    'ping_ms',
                    'download_mbps',
                    'upload_mbps',
                    'server_name',
                    'server_location',
                    'status'
                ])
    
    def run_speedtest(self) -> Dict:
        """
        ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
        
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        """
        try:
            print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢...")
            
            # ‡∏£‡∏±‡∏ô speedtest-cli ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏ú‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON
            result = subprocess.run(
                ['speedtest-cli', '--json'],
                capture_output=True,
                text=True,
                timeout=120  # timeout 2 ‡∏ô‡∏≤‡∏ó‡∏µ
            )
            
            if result.returncode == 0:
                data = json.loads(result.stdout)
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Mbps
                download_mbps = round(data['download'] / 1_000_000, 2)
                upload_mbps = round(data['upload'] / 1_000_000, 2)
                ping_ms = round(data['ping'], 2)
                
                return {
                    'ping_ms': ping_ms,
                    'download_mbps': download_mbps,
                    'upload_mbps': upload_mbps,
                    'server_name': data['server']['name'],
                    'server_location': f"{data['server']['country']}, {data['server']['name']}",
                    'status': 'success'
                }
            else:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {result.stderr}")
                return {
                    'ping_ms': 0,
                    'download_mbps': 0,
                    'upload_mbps': 0,
                    'server_name': 'N/A',
                    'server_location': 'N/A',
                    'status': 'failed'
                }
                
        except subprocess.TimeoutExpired:
            print("‚è∞ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤")
            return {
                'ping_ms': 0,
                'download_mbps': 0,
                'upload_mbps': 0,
                'server_name': 'N/A',
                'server_location': 'N/A',
                'status': 'timeout'
            }
        except Exception as e:
            print(f"üí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
            return {
                'ping_ms': 0,
                'download_mbps': 0,
                'upload_mbps': 0,
                'server_name': 'N/A',
                'server_location': 'N/A',
                'status': 'error'
            }
    
    def save_to_csv(self, data: Dict):
        """
        ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå CSV
        
        Args:
            data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        """
        timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        with open(self.log_file, 'a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            writer.writerow([
                timestamp,
                data['ping_ms'],
                data['download_mbps'],
                data['upload_mbps'],
                data['server_name'],
                data['server_location'],
                data['status']
            ])
    
    def collect_once(self):
        """‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á"""
        timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f"\nüìä [{timestamp}] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢")
        
        # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        result = self.run_speedtest()
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        if result['status'] == 'success':
            print(f"‚úÖ ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
            print(f"   üèì Ping: {result['ping_ms']} ms")
            print(f"   ‚¨áÔ∏è  Download: {result['download_mbps']} Mbps")
            print(f"   ‚¨ÜÔ∏è  Upload: {result['upload_mbps']} Mbps")
            print(f"   üñ•Ô∏è  Server: {result['server_location']}")
        else:
            print(f"‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {result['status']}")
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á CSV
        self.save_to_csv(result)
        print(f"üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß -> {self.log_file}")
        
        return result
    
    def collect_continuous(self, interval_minutes: int = 30):
        """
        ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
        
        Args:
            interval_minutes: ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ô‡∏≤‡∏ó‡∏µ)
        """
        print(f"üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏∏‡∏Å {interval_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ")
        print("‚èπÔ∏è  ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î")
        
        try:
            while True:
                self.collect_once()
                print(f"‚è∞ ‡∏£‡∏≠ {interval_minutes} ‡∏ô‡∏≤‡∏ó‡∏µ...")
                time.sleep(interval_minutes * 60)
                
        except KeyboardInterrupt:
            print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    def show_recent_data(self, lines: int = 10):
        """
        ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        
        Args:
            lines: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
        """
        if not os.path.exists(self.log_file):
            print("üìÇ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return
        
        print(f"\nüìà ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {lines} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:")
        print("-" * 80)
        
        with open(self.log_file, 'r', encoding='utf-8') as file:
            reader = csv.reader(file)
            data = list(reader)
            
            if len(data) <= 1:
                print("üìÇ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
                return
            
            # ‡πÅ‡∏™‡∏î‡∏á header
            header = data[0]
            print(f"{'‡πÄ‡∏ß‡∏•‡∏≤':<20} {'Ping':<8} {'Down':<8} {'Up':<8} {'‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞':<10}")
            print("-" * 80)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            recent_data = data[-lines:] if len(data) > lines else data[1:]
            for row in recent_data:
                if len(row) >= 7:
                    print(f"{row[0]:<20} {row[1]:<8} {row[2]:<8} {row[3]:<8} {row[6]:<10}")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå"""
    collector = NetworkQualityCollector()
    
    if len(sys.argv) == 1:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ argument ‡πÅ‡∏™‡∏î‡∏á help
        print("üåê Dashboard ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï")
        print("=" * 50)
        print("\n‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
        print("  python collect_data.py once           - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        print("  python collect_data.py continuous     - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏∏‡∏Å 30 ‡∏ô‡∏≤‡∏ó‡∏µ")
        print("  python collect_data.py continuous 15  - ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏∏‡∏Å 15 ‡∏ô‡∏≤‡∏ó‡∏µ")
        print("  python collect_data.py show          - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        print("  python collect_data.py show 20       - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 20 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
        print("\nüìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå 'network_log.csv'")
        return
    
    command = sys.argv[1].lower()
    
    if command == "once":
        collector.collect_once()
        
    elif command == "continuous":
        interval = 30
        if len(sys.argv) > 2:
            try:
                interval = int(sys.argv[2])
            except ValueError:
                print("‚ùå ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
                return
        collector.collect_continuous(interval)
        
    elif command == "show":
        lines = 10
        if len(sys.argv) > 2:
            try:
                lines = int(sys.argv[2])
            except ValueError:
                print("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
                return
        collector.show_recent_data(lines)
        
    else:
        print("‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ: once, continuous, ‡∏´‡∏£‡∏∑‡∏≠ show")


if __name__ == "__main__":
    main()